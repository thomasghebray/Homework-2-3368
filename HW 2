# Thomas Ghebray    
# CIS 3368
# Homework 2
# Still need help with my db I think I changed the first assignemnt up which should now work
import flask
from flask import jsonify
from flask import request, make_response
import mysql.connector
from mysql.connector import Error
from sql import create_connection
import hashlib

def create_connection(host_name, user_name, user_password, db_name):
    connection = None
    try:
        connection = mysql.connector.connect(
            host = host_name,
            user = user_name,
            password = user_password,
            database = db_name
        )
        print("Success! A connection has been established")
    except Error as e:
        print(f"ERROR! The error '{error}' has occured")
    return connection
# I keep having trouble connecting my code to my databse 
conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hw2db")  
sql = "Select * FROM zoo, logs"  
cursor.execute(sql)
rows = cursor.fetchall()   

def execute_query(connection, query):  
    cursor = connection.cursor()
    try:
        cursor.execute(query)
        connection.commit()
        print("SUCCESS! The Query has Been Executed Successfully") 
    except Error as e:
    # Ths is how I can place an error messsage in my code
        print(f"ERROR! The error '{error} has occurred")   

def execute_read_query(connection, query): 
    cursor = connection.cursor(dictionary=True)
    result = None
    try:
        cursor.execute(query)
        result = cursor.fetchall()
        return result
    except Error as e:
    # I will need to create an error message which will be this 
        print(f"ERROR! The error '{error}' has occurred")   



# This will create my flask name as I will be using this same method for my project
app.config["DEBUG"] = True # Allow access to my data

# This line will create my selection 
@app.route('/api/animals', methods=['GET'])
def animals():
    conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hw2db")
    sql = "SELECT * FROM zoo"   
    guestlist = execute_read_query(conn,sql)
    results = []
    for animals in zoo:
        results.append animals)
    return jsonify(results)    #which data will be returned


#I will create and design a code that will log my entry
@app.route('/api/addanimal', methods=['POST'])
def new_animal():
    request_data = request.get_json()
    newanimal = request_data['animal']
    newgender = request_data['gender']        
    newsubtype = request_data['subtype']
    newage = request_data['age']
    newcolor = request_data['color']


    conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hw2db")    # database connection
    # I will now insert my satements for my code 
    sql1 = "INSERT INTO zoo (animal, gender, subtype, age, color) VALUES ('%s', '%s', '%s', '%s', '%s')" % (newanimal, newgender, newsubtype, newage, newcolor)  
    # I will now create the required variabales 
    execute_query(conn, sql)
    
    request_data = request.get_json()
    logdate = request_data['date']  
    loganimalid = request_data['name']   
    comment = "The new animal " + str(new_animal) + " has been added"
# New additions will be added 
    sql2 = "INSERT INTO log (name, message, date) VALUES (%s, %s, '%s')" % (logdate, logname, logmessage)  
    inputted data into logs table
    execute_query(conn, sql2)
    return 'SWEET, THE CAR WAS SUCCESSFULLY ADDED AND LOGGED.' 


# Creating a table
@app.route('/api/deleteanimal', methods=['DELETE'])   
# I will now create a way to access the db 
def del_animal():
    request_data = request.get_json()
    delete_car_id = request_data['id']   # id being requested
# I will now create a connection for my db 
    conn = create_connection("hw1.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hw1db")   
    sql = "DELETE FROM cars WHERE id = = %s" % (delete_car_id)    
    execute_query(conn, sql)

    request_data = request.get_json()
    logdate = request_data['date']   # YYYY-MM-DD format for the date
    logname = request_data['name']   # name of mechanic
    logmessage = request_data['message']   # short log message

    sql2 = "INSERT INTO log (name, message, date) VALUES (%s, %s, '%s')" % (logdate, logname, logmessage)    # insert inputted data into logs table
    execute_query(conn, sql2)
    return 'SEEYA LATER, THE CAR WAS SUCCESSFULLY DELETED AND LOGGED'  
# I will create a statement to see if it has been accesed 


# new mechanic into the mechanic table
@app.route('/api/addmechanic', methods=['POST'])
def add_mechanic():
    request_data = request.get_json(). #Format everything correctly
    newfirstname = request_data['firstname']
    newlastname = request_data['lastname']       
    newtitle = request_data['title']
    newcurrentcar = request_data['currentcar']


    conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hwdb")  # database Connection
    sql = "INSERT INTO mechanic (firstname, lastname, title, currentcar) VALUES (%s, %s, %s, %s)" % (newfirstname, newlastname, newtitle, newcurrentcar)   
# This is how I will insert my variables 
    execute_query(conn, sql)

    request_data = request.get_json()
# I will need to format my my data 

    logdate = request_data['date']   
    logname = request_data['name']  
    logmessage = request_data['message'] 
# Insert data into table
    sql2 = "INSERT INTO log (name, message, date) VALUES (%s, %s, '%s')" % (logdate, logname, logmessage) 
    execute_query(conn, sql2)
    return 'SWEET, THE MECHANIC WAS SUCCESSFULLY ADDED AND LOGGED'  

# will delete a car from the cars table based on the id provided
@app.route('/api/deletemechanic', methods=['DELETE'])   # creating a access token which will be required in order to execute the delete method
def del_mechanic():
# Request my data
    request_data = request.get_json()
    delete_car_id = request_data['id']

    conn = create_connection("cis3368.cn0r90kgsnij.us-east-2.rds.amazonaws.com", "admin1", "databasepswd", "3368hw1db")
    sql = "DELETE FROM cars WHERE id = = %s" % (delete_car_id)    # will delete the item selected above completely based on its unique ID which is auto incremented
    execute_query(conn, sql)
# Requesting data
    request_data = request.get_json()
    logdate = request_data['date']   # YYYY-MM-DD format for the date
    logname = request_data['name']   # name of mechanic
    logmessage = request_data['message']   # short log message

    sql2 = "INSERT INTO log (name, message, date) VALUES (%s, %s, '%s')" % (logdate, logname, logmessage)    # insert inputted data into logs table
    execute_query(conn, sql2)
    return 'SO LONG, THE MECHANIC WAS SUCCESSFULLY DELETED AND LOGGED'   # message that will show in the body if the post method is executed correctly


# will assign a car to a specific mechanic
@app.route('/api/assigncar', methods=['POST'])
def auth_assign():
    if request.authorization:
        encoded=request.authorization.password.encode() #unicode encoding
        hashedResult = hashlib.sha256(encoded) #hashing
        if request.authorization.username == 'admin'and hashedResult.hexdigest() == password:    # username and password are authenticated
            return '<h1> SUCCESS </h1>'   # success message
    return make_response('ERROR, COULD NOT VERIFY!', 401, {'WWW-Authenticate' : 'Basic realm="Login Required"'})    # Error message

def assign_car():
    request_data = request.get_json()
    mechanic_id = request_data['id']   # mechanic id from mechanic table
    car_id = request_data['id']    #car id from car table


    conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin1", "databasepswd", "3368hw2db")  # database connection
    sql = "INSERT INTO mechanic (currentcar) SELECT mechanic.id, car.id FROM mechanic, car WHERE id = = %s %s" % (mechanic_id, car_id)   # assigns a car to a mechanic by id
    execute_query(conn, sql)
    return 'NICE, THE MECHANIC WAS SUCCESSFULLY ASSIGNED TO THE VEHICLE'  # message that will show in the body if the post method is executed correctly



# will unassign a car from a specific mechanic
@app.route('/api/unassigncar', methods=['POST'])
def auth_unassign():
    if request.authorization:
        encoded=request.authorization.password.encode() #unicode encoding
        hashedResult = hashlib.sha256(encoded) #hashing
        if request.authorization.username == username and hashedResult.hexdigest() == password:
            return '<h1> SUCCESS </h1>'
    return make_response('ERROR, COULD NOT VERIFY!', 401, {'WWW-Authenticate' : 'Basic realm="Login Required"'})

def unassign_car():
    request_data = request.get_json()
    mechanic_id = request_data['id']  # mechanic id from mechanic table
    car_id = request_data['id']   # car id from car table
#Creating a connection host

    conn = create_connection("hw2.cxyzubuspej3.us-east-2.rds.amazonaws.com", "admin", "databasepswd", "3368hw2db")   
    # database connection
    sql = "DELETE FROM currentcar.mechanic SELECT mechanic.id, car.id FROM mechanic, car WHERE id = = %s %s" % (mechanic_id, car_id)   
    # unassigns a car from the mechanic using id
    execute_query(conn, sql)
    return 'ADIOS, THE MECHANIC WAS SUCCESSFULLY UNASSIGNED FROM THE VEHICLE' 


# will return all logs from within the logs table
@app.route('/api/logs', methods=['GET'])
def get_logs():
    conn = create_connection("3368hw1db", "admin", "databasepswd", "3368hw1db")   # database connection
    sql = "SELECT * FROM logs ORDER BY date DESC"    # selects all data from the logs table and orders it by date in descending order (most recent logs first)
    logs = execute_read_query(conn,sql)
    results = []
    for details in logs:
        results.append(details)
    return jsonify(results)   # Report all recorded Logs 
    
    
